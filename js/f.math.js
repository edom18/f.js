// Generated by CoffeeScript 1.5.0

(function(win, doc) {
  var M22, M44, MeshMgr, Vec3, Vertex, drawTriangles;
  Vec3 = (function() {

    function Vec3(x, y, z) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.z = z != null ? z : 0;
    }

    Vec3.prototype.zero = function() {
      return this.x = this.y = this.z = 0;
    };

    Vec3.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    };

    Vec3.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    };

    Vec3.prototype.copyFrom = function(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    };

    Vec3.prototype.norm = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Vec3.prototype.normalize = function() {
      var nrm;
      nrm = this.norm();
      if (nrm !== 0) {
        this.x /= nrm;
        this.y /= nrm;
        this.z /= nrm;
      }
      return this;
    };

    Vec3.prototype.smul = function(k) {
      this.x *= k;
      this.y *= k;
      this.z *= k;
      return this;
    };

    Vec3.prototype.dpWith = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vec3.prototype.cp = function(v, w) {
      this.x = (w.y * v.z) - (w.z * v.y);
      this.y = (w.z * v.x) - (w.x * v.z);
      this.z = (w.x * v.y) - (w.y * v.x);
      return this;
    };

    Vec3.prototype.toString = function() {
      return "" + this.x + "," + this.y + "," + this.z;
    };

    return Vec3;

  })();
  M44 = (function() {

    function M44(cpy) {
      if (cpy != null) {
        this.copyFrom(cpy);
      } else {
        this.ident();
      }
    }

    M44.prototype.ident = function() {
      this._12 = this._13 = this._14 = 0;
      this._21 = this._23 = this._24 = 0;
      this._31 = this._32 = this._34 = 0;
      this._41 = this._42 = this._43 = 0;
      this._11 = this._22 = this._33 = this._44 = 1;
      return this;
    };

    M44.prototype.copyFrom = function(m) {
      this._11 = m._11;
      this._12 = m._12;
      this._13 = m._13;
      this._14 = m._14;
      this._21 = m._21;
      this._22 = m._22;
      this._23 = m._23;
      this._24 = m._24;
      this._31 = m._31;
      this._32 = m._32;
      this._33 = m._33;
      this._34 = m._34;
      this._41 = m._41;
      this._42 = m._42;
      this._43 = m._43;
      this._44 = m._44;
      return this;
    };

    M44.prototype.transVec3 = function(out, x, y, z) {
      out[0] = x * this._11 + y * this._21 + z * this._31 + this._41;
      out[1] = x * this._12 + y * this._22 + z * this._32 + this._42;
      out[2] = x * this._13 + y * this._23 + z * this._33 + this._43;
      return out[3] = x * this._14 + y * this._24 + z * this._34 + this._44;
    };

    M44.prototype.perspectiveLH = function(vw, vh, z_near, z_far) {
      this._11 = 2.0 * z_near / vw;
      this._12 = 0;
      this._13 = 0;
      this._14 = 0;
      this._21 = 0;
      this._22 = 2 * z_near / vh;
      this._23 = 0;
      this._24 = 0;
      this._31 = 0;
      this._32 = 0;
      this._33 = z_far / (z_far - z_near);
      this._34 = 0;
      this._41 = 0;
      this._42 = 0;
      this._43 = z_near * z_far / (z_near - z_far);
      return this._44 = 0;
    };

    M44.prototype.mul = function(A, B) {
      this._11 = A._11 * B._11 + A._12 * B._21 + A._13 * B._31 + A._14 * B._41;
      this._12 = A._11 * B._12 + A._12 * B._22 + A._13 * B._32 + A._14 * B._42;
      this._13 = A._11 * B._13 + A._12 * B._23 + A._13 * B._33 + A._14 * B._43;
      this._14 = A._11 * B._14 + A._12 * B._24 + A._13 * B._34 + A._14 * B._44;
      this._21 = A._21 * B._11 + A._22 * B._21 + A._23 * B._31 + A._24 * B._41;
      this._22 = A._21 * B._12 + A._22 * B._22 + A._23 * B._32 + A._24 * B._42;
      this._23 = A._21 * B._13 + A._22 * B._23 + A._23 * B._33 + A._24 * B._43;
      this._24 = A._21 * B._14 + A._22 * B._24 + A._23 * B._34 + A._24 * B._44;
      this._31 = A._31 * B._11 + A._32 * B._21 + A._33 * B._31 + A._34 * B._41;
      this._32 = A._31 * B._12 + A._32 * B._22 + A._33 * B._32 + A._34 * B._42;
      this._33 = A._31 * B._13 + A._32 * B._23 + A._33 * B._33 + A._34 * B._43;
      this._34 = A._31 * B._14 + A._32 * B._24 + A._33 * B._34 + A._34 * B._44;
      this._41 = A._41 * B._11 + A._42 * B._21 + A._43 * B._31 + A._44 * B._41;
      this._42 = A._41 * B._12 + A._42 * B._22 + A._43 * B._32 + A._44 * B._42;
      this._43 = A._41 * B._13 + A._42 * B._23 + A._43 * B._33 + A._44 * B._43;
      this._44 = A._41 * B._14 + A._42 * B._24 + A._43 * B._34 + A._44 * B._44;
      return this;
    };

    M44.prototype.translate = function(x, y, z) {
      this._11 = 1;
      this._12 = 0;
      this._13 = 0;
      this._14 = 0;
      this._21 = 0;
      this._22 = 1;
      this._23 = 0;
      this._24 = 0;
      this._31 = 0;
      this._32 = 0;
      this._33 = 1;
      this._34 = 0;
      this._41 = x;
      this._42 = y;
      this._43 = z;
      this._44 = 1;
      return this;
    };

    M44.prototype.rotX = function(r) {
      this._22 = Math.cos(r);
      this._23 = Math.sin(r);
      this._32 = -this._23;
      this._33 = this._22;
      this._12 = this._13 = this._14 = this._21 = this._24 = this._31 = this._34 = this._41 = this._42 = this._43 = 0;
      this._11 = this._44 = 1;
      return this;
    };

    M44.prototype.rotY = function(r) {
      this._11 = Math.cos(r);
      this._13 = Math.sin(r);
      this._31 = -this._13;
      this._33 = this._11;
      this._12 = this._14 = this._21 = this._23 = this._24 = this._32 = this._34 = this._41 = this._42 = this._43 = 0;
      this._22 = this._44 = 1;
      return this;
    };

    return M44;

  })();
  M22 = (function() {

    function M22() {
      this._11 = 1;
      this._12 = 0;
      this._21 = 0;
      this._22 = 1;
    }

    M22.prototype.getInvert = function() {
      var det, out;
      out = new M22;
      det = this._11 * this._22 - this._12 * this._21;
      if ((0.0001 > det && det > -0.0001)) {
        return null;
      }
      out._11 = this._22 / det;
      out._22 = this._11 / det;
      out._12 = this._12 / det;
      out._21 = this._21 / det;
      return out;
    };

    return M22;

  })();
  MeshMgr = (function() {

    function MeshMgr(g, img, mesh) {
      this.g = g;
      this.img = img;
      this.mesh = mesh;
      this.vertex = [];
    }

    MeshMgr.prototype.addVertex = function(x, y, ux, uy, corner) {
      return this.vertex.push(new Vertex(x, y, ux, uy, corner));
    };

    MeshMgr.prototype.addIndex = function(x, y) {
      return this.index.push(x, y);
    };

    MeshMgr.prototype.getMesh = function() {
      return this.vertex;
    };

    return MeshMgr;

  })();
  Vertex = (function() {

    function Vertex(x, y, ux, uy, corner) {
      this.x = x;
      this.y = y;
      this.ux = ux;
      this.uy = uy;
      this.corner = corner;
      this.ox = x;
      this.oy = y;
    }

    return Vertex;

  })();
  drawTriangles = function(g, img, vertecies, indecies, uvData) {
    var Ax, Ay, Bx, By, a, b, c, cv, d, h, i, i0, i1, i2, index, m, mi, tx, ty, uv0, uv0x, uv0y, uv1, uv1x, uv1y, uv2, uv2x, uv2y, v0, v0x, v0y, v1, v1x, v1y, v2, v2x, v2y, w, _Ax, _Ay, _Bx, _By, _g, _i, _len;
    cv = doc.createElement('canvas');
    _g = cv.getContext('2d');
    w = img.width;
    h = img.height;
    cv.width = w;
    cv.height = h;
    for (i = _i = 0, _len = indecies.length; _i < _len; i = _i += 3) {
      index = indecies[i];
      i0 = indecies[i + 0];
      i1 = indecies[i + 1];
      i2 = indecies[i + 2];
      v0 = vertecies[i0];
      v1 = vertecies[i1];
      v2 = vertecies[i2];
      uv0 = uvData[i0];
      uv1 = uvData[i1];
      uv2 = uvData[i2];
      v0x = v0.x;
      v0y = v0.y;
      v1x = v1.x;
      v1y = v1.y;
      v2x = v2.x;
      v2y = v2.y;
      uv0x = uv0.x;
      uv0y = uv0.y;
      uv1x = uv1.x;
      uv1y = uv1.y;
      uv2x = uv2.x;
      uv2y = uv2.y;
      _Ax = v1x - v0x;
      _Ay = v1y - v0y;
      _Bx = v2x - v0x;
      _By = v2y - v0y;
      Ax = (uv1x - uv0x) * w;
      Ay = (uv1y - uv0y) * h;
      Bx = (uv2x - uv0x) * w;
      By = (uv2y - uv0y) * h;
      m = new M22;
      m._11 = Ax;
      m._12 = Ay;
      m._21 = Bx;
      m._22 = By;
      mi = m.getInvert();
      if (mi === null) {
        return;
      }
      a = mi._11 * _Ax + mi._12 * _Bx;
      c = mi._21 * _Ax + mi._22 * _Bx;
      b = mi._11 * _Ay + mi._12 * _By;
      d = mi._21 * _Ay + mi._22 * _By;
      tx = v0x - (a * uv0x * w + c * uv0y * h);
      ty = v0y - (b * uv0x * w + d * uv0y * h);
      _g.save();
      _g.beginPath();
      _g.moveTo(v0x, v0y);
      _g.lineTo(v1x, v1y);
      _g.lineTo(v2x, v2y);
      _g.clip();
      _g.closePath();
      _g.setTransform(a, b, c, d, tx, ty);
      _g.drawImage(img, 0, 0);
      _g.restore();
    }
    g.clearRect(0, 0, w, h);
    return g.drawImage(cv, 0, 0);
  };
  exports.Vec3 = Vec3;
  exports.M44 = M44;
  return exports.M22 = M22;
})(window, window.document);
